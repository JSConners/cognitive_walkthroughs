Comment 1: It can be used cross platform, using a device as a key, using biometrics I think it’s also possible because all platforms supporting passkeys (like Google) supports adding multiple passkeys, then, an usb key + your iPhone Face ID, an windows laptop fingerprint, sadly only a few services supports that and some of them just use it as a password but requires you to type you login/email, which breaks the part of being faster than other methods.Comment 2: Passkeys are cross-platform.  The [webauthn api](https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API) is a browser protocol, so it just relies on browsers supporting it, not operating systems.  The browser developers are the ones who have to contend with operating system support for their software, not the end users.  You can see all of the sites that support using webauthn for YubiKeys here: https://www.yubico.com/works-with-yubikey/catalog/?protocol=5&sort=popular.

As far as logging into local devices like you mentioned, I am not aware of Windows or Macs supporting passkeys for login at this time, though perhaps they do, but in any case, local accounts are not really what people are normally trying to use them to secure.Comment 3: A good passkey implementation allows the user to register multiple passkeys on their account. You log in with Windows - it prompts you to create a passkey. You log in with Android, is prompts you to add a second passkey. Log in later on Mac, create another passkey. In your account settings, you should be able to review all your passkeys and add/remove them as needed. Cross platform syncing of passkeys is not necessary in such an environment.Comment 4: The core idea is passkeys is public key cryptography. When you create a passkeys for a website,your device is generating a key pair where you keep the private key and the website stores the public key. These key pairs are just small text files. Syncing, importing, and exporting Is absolutely possible and there is no blocker from the protocol implementation there.

I do agree vendors need to make it so their software can export and import passkeys, but this is not a problem of passkeys themselves. It's vendors attempting to do vendor lock-in and is not exclusive to passkeys.

If you want to, you can use different password managers with passkeys and seamesly sync your passkeys across devices. I know 1Password and Strongbox for Max support this.Comment 5: I have tried putting all of this together in this article: [https://www.corbado.com/blog/b2c-authentication-broken](https://www.corbado.com/blog/b2c-authentication-broken) why we think it will work out. We are of course "biased" as we are a passkey authentication provider, but I still think it is the right direction. There will always be a need for an additional recovery method and some kind of "smart" invisible MFA.Comment 6: The reason why it's not widely used as the only login method is
* user/pass are already implemented, and it's the most common method. Passkey are usually just another add-on to this existing system.
* there's more setup to fido2 than just using user/pass
* there's potentially losing your hardware passkey and get locked out, though a recovery key would solve this.

In terms of implementation, yes, it can. I can create a test website with passkey only auth right now.Comment 7: This is indeed a big problem with Passkeys - Apple and Google etc have implemented a vendor lockin which means you can’t use a passkey across other platforms.

Is there interest in a platform-independent service that stores the passkey (private key)? It’s something I’m thinking for a direction for Passkeyme.comComment 8: [deleted]Comment 9: But you have to login before you can add a Passkey to your account. So then how do you login?Comment 10: Windows supports using security keys to login to a Windows PC.  Go to Settings>Sign-in options>Security Key>Manage.

It's also worth noting that Windows Hello is a FIDO 2 compliant Passkey that can use the TPM to store the Passkey credential.

[Windows sign-in options and account protection - Microsoft Support](https://support.microsoft.com/en-us/windows/windows-sign-in-options-and-account-protection-7b34d4cf-794f-f6bd-ddcc-e73cdf1a6fbf#managesecuritykey)Comment 11: That's not what I was talking about. I'm talking about the Passkeys/credentials themselves, not the protocol.

Yes, the protocol is cross-platform, but the Passkeys themselves do not transfer between devices and especially not between platforms.Comment 12: But you have to login before you can add a Passkey to your account.Comment 13: A big part of the problem is so many services don't implement Passkeys properly. Many sites are limited to a single passkey. Because modern tech specs aren't specs anymore, too many parts are optionalComment 14: The website can detect that on Windows it should guide a user to scan a QR code, or if that's too complicated, offer to send an OTP via email for login. I think consumer behavior needs to change; they will come to perceive their phones as the primary means of login. This won't happen overnight, but with newer versions of Android and Chrome, you have a solid experience on mobile. Yes, cross-device functionality with Windows is not great at the moment, but once you figure out how to connect your phone to your Chrome profile, the rest happens pretty automatically. For me, that's analogous to the strong adoption of Apple Pay; it took some time, but now even mom and dad can use it.Comment 15: I believe you can select to use a Passkey like normal and then select something like "use other device" or whatever, then you can scan a QR code to authenticate.
It all depends on what browser and OS you're using on how the UI looks.Comment 16: For example, a Google account you can add more than one passkeys, you would need to log in with email and password, and then add that specific device to the list to log in easily using it. In case you’re using someone else computer, it would happen in the same way, you click in passkeys or in case of Google, log in → type email and then you would use your phone or usb key to authenticate instead of a password that could be hacked.Comment 17: So your answer is: Yes there must be other methods of equal quality or comparable quality. Currently the only other option that is feasible is: email otp + sms otp (or RCS/WhatsApp OTP). Your specific example indeed does not work.Comment 18: Right, passkeys do not get transferred, but you can register them on any device you want, on whatever platform you want.  I can register the same passkey on Facebook, Google, Discord, AWS, whatever.Comment 19: That is correct, although from what we hear the working group is on this topic to allow the flow between platforms, but you are right this is currently a problem. Passkeys at the moment are especially suited for three setups:

* **Go passwordless single factor:** Allow login via email otp + social login + passkeys. As passwords are not part of the system A LOT of breaches are mitigated (credential stuffing). This solution cannot leverage the inherent 2FA functionality because there are other factors and fallbacks that are weaker. Still it is comfortable and fast for a consumer to do that: They can be logged in automatically without redirects.
* **Go mobile-first passkey:** Immediately register the passkey on a phone. This is possible on MOST of the platforms today. Including Microsoft. Sorry to link to our corporate blog but its a good summary: [https://www.corbado.com/blog/webauthn-cross-device-authentication-passkeys-mobile-first](https://www.corbado.com/blog/webauthn-cross-device-authentication-passkeys-mobile-first) other companies have done it like: [https://www.corbado.com/blog/finom-passkeys](https://www.corbado.com/blog/finom-passkeys) - here the passkey is created on the mobile phone via QR code
* **Go passkey-first MFA:** If you want or need to go MFA, you collect additionally a mobile phone number. So the fallback login is email-otp + sms-otp (or password + sms OTP, although passwords are not a good option) and you add a passkey on every device you encounter and leverage cross-device-authentication where possible.

Hope this helps.Comment 20: From [https://support.google.com/accounts/answer/13548313?hl=en#zippy=%2Cto-sign-in-to-your-account-on-a-computer-you-can-use-a-passkey-created-on-a-mobile-device](https://support.google.com/accounts/answer/13548313?hl=en#zippy=%2Cto-sign-in-to-your-account-on-a-computer-you-can-use-a-passkey-created-on-a-mobile-device)

If you have a passkey on an Android or iOS mobile device, you can use that passkey to sign in to a different mobile device or computer.

1. On the Google sign-in page on your computer, enter your username.
2. Below the password field, click the **Try another way** link.
3. Click **Use your passkey**.
4. On your screen, find the QR code.
   * If you want to use a passkey that was created on a hardware security key, you'll have an option to select "USB security key" or equivalent.
5. To scan the QR code, use your phone's built-in QR code scanner app.
   * **For iOS:** You can use the built-in camera app.
   * **For Google Pixel phones:** You can use the built-in QR code scanner.
   * **For other Android devices:** If you can't scan the QR code with the native camera app or the system QR code scanner, you can use Google Lens.
6. On your phone, tap **Use passkey**.
   * To verify your identity on your phone, you'll be prompted for your fingerprint, face unlock, or phone PIN.
   * The next time you sign in with this computer and phone combination, you'll automatically get a notification on your phone to complete the identity verification process.

**Tip:** After you sign in, you may be asked to create a passkey on the computer. If you don't want other users to access your account, do not create a passkey on a shared device.Comment 21: Passwords *can* be very secure. However, it relies on the user and website developer to make it that way. Some users are going to ever fall for phishing and some systems are too secure for a hacker to break in. MFA can prevent a single password from ever letting someone in. Good encryption strategies can stop hackers from getting access to the data they need. Passwords are never going to go away, but the hope is that Passkeys are going to help those who can't be secure on their own. Comment 22: Also note that most sites currently do NOT disable username/password logins when you register a passkey. So, if you are using an OS/platform that you have not already used to register a passkey with a particular site, just log in with you password and register the new  passkey. 

Obviously supporting authentication from a mobile or remote device would need to be supported before password logins can be completely retired on any given site. It's still early days.Comment 23: I am obviously a passkey believer, and I still agree with your points. In my prior roles, my team and I took pride in approaching account security in a way that protected even users who were lazy or naive in their password management. Passkeys make that much easier, although risk-based MFA, device detection, and location analysis can also go a long way.Comment 24: I see you're with Corbado? I'm in the Corbado slack team and I used their resources when first adding Passkey support to my companies systems. Their resources were very helpful.Comment 25: Oh! Yes, that's right. I'm happy that our resources helped you in the passkey journey for your company. The point you are referring to, which is intentionally missing in the list, is what we will try to close as a gap. Passkeys' non-phishability and integrated 2FA characteristics only make sense if the fallback and recovery process involves MFA—that's what I think will happen going forward. Actually, simply implementing an optimistic passkey creation and login is pretty simple; embedding it in a consumer-friendly way with appropriate fallbacks in conjunction with social login is quite a bit of work that we have not yet accomplished.